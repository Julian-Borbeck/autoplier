library(BiocManager)
BiocManager::install()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
library(BiocManager)
#BiocManager::install("hmdbQuery")
library(hmdbQuery)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
library(BiocManager)
BiocManager::install("hmdbQuery")
library(hmdbQuery)
getHMDBids <- function(ann){
#init list of HMDBids
HMDBlist <- c()
#loop over annotated ions
for (i in 1:nrow(ann)){
met_IDs <- unlist(strsplit(as.character(ann$id[i]), '; '))
met_IDs <- met_IDs[grepl("HMDB", met_IDs)]
met_IDs <- sub("HMDB", "HMDB00", met_IDs)
#accumulate HMDB id list
if (length(met_IDs)>0){
HMDBlist <- c(HMDBlist, met_IDs)
}
}
return(unique(HMDBlist))
}
getpathways <- function(ids){
#init pathway list
pathwaylist <- c()
#loop of ids
for (id in ids){
#print(id)
#look up id in HMDB
entry <- NA
entry <- tryCatch(HmdbEntry(prefix = "http://www.hmdb.ca/metabolites/", id = id),
error = function(e) {print(paste('error:', e))})
#get associated pathways if found
if (class(entry)[1]=="HmdbEntry") {
pwys <- store(entry)$biological_properties$pathways
if(class(pwys)=="matrix"){
pathwaylist <- c(pathwaylist, pwys[1,])
}
}
}
return(unique(pathwaylist))
}
ann <- read.csv("metabolitenames.csv", header = FALSE)
View(ann)
View(ann)
unique(ann)
ann <- read.csv("metabolitenames.csv", header = FALSE)
View(ann)
ann <- read.csv("metabolitenames.csv", header = FALSE)
#get ion labels
ions <- unique(ann)
#get HMDBids
ids <- getHMDBids(ann)
#get pathways
pathways <- getpathways(ids)
View(ions)
getHMDBids(ions)
getHMDBids(ions)
getHMDBids <- function(ann){
#init list of HMDBids
HMDBlist <- c()
#loop over annotated ions
for (i in 1:nrow(ann)){
print(i)
met_IDs <- unlist(strsplit(as.character(ann$id[i]), '; '))
met_IDs <- met_IDs[grepl("HMDB", met_IDs)]
met_IDs <- sub("HMDB", "HMDB00", met_IDs)
#accumulate HMDB id list
if (length(met_IDs)>0){
HMDBlist <- c(HMDBlist, met_IDs)
}
}
return(unique(HMDBlist))
}
getHMDBids(ions[1])
View(ions)
View(ions)
ions
ions[1]
ann <- read.csv("refmet_results.txt", sep = " ")
ann <- read.csv("refmet_results.txt", sep = " ", comment.char = "#")
View(ann)
ann <- read.csv("refmet_results.txt", sep = "\t", comment.char = "#")
View(ann)
ann <- read.csv("refmet_results.txt", sep = "\t", comment.char = "#")
ann <- read.csv("refmet_results.txt", sep = "\t", comment.char = "#")
ions <- unique(ann)
View(ions)
ann <- read.csv("refmet_results.txt", sep = "\t", comment.char = "#")
View(ann)
ann <- read.csv("refmet_results.txt", sep = "\t", comment.char = "#")
View(ann)
#get ion labels
#ions <- unique(ann)
#get HMDBids
#ids <- getHMDBids(ann)
#get pathways
pathways <- getpathways(ann$hmdb)
View(pathways)
addpathways <- function(df){
#loop over metabolites
for (i in 1:nrow(df)){
print(df$Standardized.name[i])
#look up id in HMDB
entry <- NA
entry <- tryCatch(HmdbEntry(prefix = "http://www.hmdb.ca/metabolites/", id = df$hmdb[i]),
error = function(e) {print(paste('error:', e))})
#get associated pathways if found
if (class(entry)[1]=="HmdbEntry") {
pwys <- store(entry)$biological_properties$pathways
if(class(pwys)=="matrix"){
pathwaylist <- c(pathwaylist, pwys[1,])
#loop over pathways
for (pwy in pwys[1,]){
#add new pathways to df
if (!pwy%in%names(df)){
df[, pwy] <- FALSE
}
#assign pathway to metbolite
df[i, pwy] <- TRUE
}
}
}
}
return(unique(pathwaylist))
}
df <- read.csv("refmet_results.txt", sep = "\t", comment.char = "#")
#get pathways
pathways <- addpathways(df)
addpathways <- function(df){
#init pathway list
pathwaylist <- c()
#loop over metabolites
for (i in 1:nrow(df)){
print(df$Standardized.name[i])
#look up id in HMDB
entry <- NA
entry <- tryCatch(HmdbEntry(prefix = "http://www.hmdb.ca/metabolites/", id = df$hmdb[i]),
error = function(e) {print(paste('error:', e))})
#get associated pathways if found
if (class(entry)[1]=="HmdbEntry") {
pwys <- store(entry)$biological_properties$pathways
if(class(pwys)=="matrix"){
pathwaylist <- c(pathwaylist, pwys[1,])
#loop over pathways
for (pwy in pwys[1,]){
#add new pathways to df
if (!pwy%in%names(df)){
df[, pwy] <- FALSE
}
#assign pathway to metbolite
df[i, pwy] <- TRUE
}
}
}
}
return(unique(pathwaylist))
}
df <- read.csv("refmet_results.txt", sep = "\t", comment.char = "#")
#get pathways
pathways <- addpathways(df)
View(pathways)
View(df)
#get pathways
dflist <- addpathways(df)
addpathways <- function(df){
#init pathway list
pathwaylist <- c()
#loop over metabolites
for (i in 1:nrow(df)){
print(df$Standardized.name[i])
#look up id in HMDB
entry <- NA
entry <- tryCatch(HmdbEntry(prefix = "http://www.hmdb.ca/metabolites/", id = df$hmdb[i]),
error = function(e) {print(paste('error:', e))})
#get associated pathways if found
if (class(entry)[1]=="HmdbEntry") {
pwys <- store(entry)$biological_properties$pathways
if(class(pwys)=="matrix"){
print(pwys[1,])
pathwaylist <- c(pathwaylist, pwys[1,])
#loop over pathways
for (pwy in pwys[1,]){
#add new pathways to df
if (!pwy%in%names(df)){
df[, pwy] <- FALSE
}
#assign pathway to metbolite
df[i, pwy] <- TRUE
}
}
}
}
return(list(df, pathwaylist))
}
#get pathways
dflist <- addpathways(df)
addpathways <- function(df){
#init pathway list
pathwaylist <- c()
#loop over metabolites
for (i in 1:nrow(df)){
print(df$Standardized.name[i])
#look up id in HMDB
entry <- NA
entry <- tryCatch(HmdbEntry(prefix = "http://www.hmdb.ca/metabolites/", id = df$hmdb[i]),
error = function(e) {print(paste('error:', e))})
#get associated pathways if found
if (class(entry)[1]=="HmdbEntry") {
pwys <- store(entry)$biological_properties$pathways
if(class(pwys)=="matrix"){
print(pwys)
pathwaylist <- c(pathwaylist, pwys[1,])
#loop over pathways
for (pwy in pwys[1,]){
#add new pathways to df
if (!pwy%in%names(df)){
df[, pwy] <- FALSE
}
#assign pathway to metbolite
df[i, pwy] <- TRUE
}
}
}
}
return(list(df, pathwaylist))
}
#get pathways
dflist <- addpathways(df)
df[[2]]
dflist[[2]]
View(dflist[2])
View(dflist[[2]])
View(dflist[[2]]$pathway)
View(dflist[[1]])
dflist[[2]]$pathway
dflist[[2]]
dflist[2]$pathway
dflist[[2]]
array(dflist[[2]])
dflist[[2]]
View(dflist[[1]])
View(dflist[[2]])
addpathways <- function(df){
#init pathway list
pathwaylist <- c()
#loop over metabolites
for (i in 1:nrow(df)){
print(df$Standardized.name[i])
#look up id in HMDB
entry <- NA
entry <- tryCatch(HmdbEntry(prefix = "http://www.hmdb.ca/metabolites/", id = df$hmdb[i]),
error = function(e) {print(paste('error:', e))})
#get associated pathways if found
if (class(entry)[1]=="HmdbEntry") {
pwys <- store(entry)$biological_properties$pathways
if(class(pwys)=="matrix"){
#print(pwys[1,])
#loop over pathways
for (pwy in pwys[1,]){
#check if pathway is new
if (!pwy%in%names(df)){
#add new pathways to df
df[, pwy] <- FALSE
#add new pathways to pathwaylist
pathwaylist <- c(pathwaylist, pwys[1,])
}
#assign pathway to metbolite
df[i, pwy] <- TRUE
}
}
}
}
return(list(df, pathwaylist))
}
#get pathways
dflist <- addpathways(df)
View(dflist[[2]])
addpathways <- function(df){
#init pathway list
pathwaylist <- c()
#loop over metabolites
for (i in 1:nrow(df)){
print(df$Standardized.name[i])
#look up id in HMDB
entry <- NA
entry <- tryCatch(HmdbEntry(prefix = "http://www.hmdb.ca/metabolites/", id = df$hmdb[i]),
error = function(e) {print(paste('error:', e))})
#get associated pathways if found
if (class(entry)[1]=="HmdbEntry") {
pwys <- store(entry)$biological_properties$pathways
if(class(pwys)=="matrix"){
#print(pwys[1,])
#loop over pathways
for (pwy in pwys[1,]){
#check if pathway is new
if (!pwy%in%names(df)){
#add new pathways to df
df[, pwy] <- FALSE
#add new pathways to pathwaylist
pathwaylist <- c(pathwaylist, pwy)
}
#assign pathway to metbolite
df[i, pwy] <- TRUE
}
}
}
}
return(list(df, pathwaylist))
}
df <- read.csv("refmet_results.txt", sep = "\t", comment.char = "#")
#add pathways
dflist <- addpathways(df)
View(dflist[[2]])
classes <- unique(c(df$Super.class, df$Main.class, df$Sub.class))
classes
df[, classes] <- FALSE
View(df)
df <- dflist[[1]]
pathways <- dflist[[2]]
remove(dflist)
View(df)
classes <- unique(c(df$Super.class, df$Main.class, df$Sub.class))
df[, classes] <- FALSE
#add metabolite classes
classes <- unique(c(df$Super.class, df$Main.class, df$Sub.class))
df[, classes] <- FALSE
#loop over metabolites
for (i in 1:nrow(df)){
print(df$Standardized.name[i])
#assign superclass
df[i, df$Super.class[i]] <- TRUE
#assign class
df[i, df$Main.class[i]] <- TRUE
#assign subclass
df[i, df$Sub.class[i]] <- TRUE
}
View(df)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
library(BiocManager)
#BiocManager::install("hmdbQuery")
library(hmdbQuery)
# Download metabolite names
df <- read.csv("refmet_results.txt", sep = "\t", comment.char = "#")
#function to add pathways
addpathways <- function(df){
#init pathway list
#pathwaylist <- c()
#loop over metabolites
for (i in 1:nrow(df)){
print(df$Standardized.name[i])
#look up id in HMDB
entry <- NA
entry <- tryCatch(HmdbEntry(prefix = "http://www.hmdb.ca/metabolites/", id = df$hmdb[i]),
error = function(e) {print(paste('error:', e))})
#get associated pathways if found
if (class(entry)[1]=="HmdbEntry") {
pwys <- store(entry)$biological_properties$pathways
if(class(pwys)=="matrix"){
#print(pwys[1,])
#loop over pathways
for (pwy in pwys[1,]){
#check if pathway is new
if (!pwy%in%names(df)){
#add new pathways to df
df[, pwy] <- FALSE
#add new pathways to pathwaylist
#pathwaylist <- c(pathwaylist, pwy)
}
#assign pathway to metbolite
df[i, pwy] <- TRUE
}
}
}
}
return(df)
}
#add pathways
df <- addpathways(df)
#add metabolite classes
classes <- unique(c(df$Super.class, df$Main.class, df$Sub.class))
df[, classes] <- FALSE
#loop over metabolites
for (i in 1:nrow(df)){
print(df$Standardized.name[i])
#assign superclass
df[i, df$Super.class[i]] <- TRUE
#assign class
df[i, df$Main.class[i]] <- TRUE
#assign subclass
df[i, df$Sub.class[i]] <- TRUE
}
#write df
write.csv(df, "membership.csv", row.names = FALSE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
library(BiocManager)
#BiocManager::install("hmdbQuery")
library(hmdbQuery)
# Download metabolite names
df <- read.csv("refmet_results.txt", sep = "\t", comment.char = "#")
#function to add pathways
addpathways <- function(df){
#init pathway list
#pathwaylist <- c()
#loop over metabolites
for (i in 1:nrow(df)){
print(df$Standardized.name[i])
#look up id in HMDB
entry <- NA
entry <- tryCatch(HmdbEntry(prefix = "http://www.hmdb.ca/metabolites/", id = df$hmdb[i]),
error = function(e) {print(paste('error:', e))})
#get associated pathways if found
if (class(entry)[1]=="HmdbEntry") {
pwys <- store(entry)$biological_properties$pathways
if(class(pwys)=="matrix"){
#print(pwys[1,])
#loop over pathways
for (pwy in pwys[1,]){
#check if pathway is new
if (!pwy%in%names(df)){
#add new pathways to df
df[, pwy] <- 0
#add new pathways to pathwaylist
#pathwaylist <- c(pathwaylist, pwy)
}
#assign pathway to metbolite
df[i, pwy] <- 1
}
}
}
}
return(df)
}
#add pathways
df <- addpathways(df)
#add metabolite classes
classes <- unique(c(df$Super.class, df$Main.class, df$Sub.class))
df[, classes] <- 0
#loop over metabolites
for (i in 1:nrow(df)){
print(df$Standardized.name[i])
#assign superclass
df[i, df$Super.class[i]] <- 1
#assign class
df[i, df$Main.class[i]] <- 1
#assign subclass
df[i, df$Sub.class[i]] <- 1
}
#write df
write.csv(df, "membership.csv", row.names = FALSE)
